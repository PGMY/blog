<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: php | PGMY Programming Blog]]></title>
    <link href="http://pgmy.github.io/blog/categories/php/atom.xml" rel="self"/>
    <link href="http://pgmy.github.io/blog/"/>
    <updated>2018-01-30T07:51:29+00:00</updated>
    <id>http://pgmy.github.io/blog/</id>
    <author>
        <name><![CDATA[PGMY]]></name>
        
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[FuelPHPを初めてみる #00インストール]]></title>
        <link href="http://pgmy.github.io/blog/2014/04/21/fuelphp0/"/>
        <updated>2014-04-21T07:38:04+00:00</updated>
        <id>http://pgmy.github.io/blog/2014/04/21/fuelphp0</id>
        <content type="html"><![CDATA[<a name="L...............FuelPHP"></a>
<h1>はじめてのFuelPHP</h1>

<p>ちょっとさわってみることになったのでいろいろとメモしていきたいなと思います。<br/>
環境はMacOSXで。<br/>
oilコマンドからのプロジェクト作成までです。</p>

<!-- more -->


<a name="oil....................."></a>
<h2>oilのインストール</h2>

<p>コマンドラインからだと簡単インストール。<br/>
下記コマンドを実行すればオッケーです。</p>

<pre><code>curl get.fuelphp.com/oil | sh
</code></pre>

<a name="L..........................."></a>
<h2>プロジェクトの作成</h2>

<p>やることを一気に書いちゃいます。</p>

<pre><code>oil create [projectName]
cd [projectName]
rm -rf .git .gitmodules *.md docs fuel/core fuel/packages
git init
git submodule add git://github.com/fuel/core.git fuel/core
git submodule add git://github.com/fuel/oil.git fuel/packages/oil
git submodule add git://github.com/fuel/auth.git fuel/packages/auth
git submodule add git://github.com/fuel/parser.git fuel/packages/parser
git submodule add git://github.com/fuel/orm.git fuel/packages/orm
git submodule add git://github.com/fuel/email.git fuel/packages/email
git submodule foreach 'git checkout 1.7/master'
git add .
git commit -m "initial commit"
</code></pre>

<p>クローンする時は</p>

<pre><code>git clone --recursive [リポジトリURL]
</code></pre>

<p>サブモジュールをアップデートしたい時は</p>

<pre><code>git submodule foreach 'git pull'
git submodule foreach 'git checkout [目的のバージョン]/master'
</code></pre>

<a name="L..........................."></a>
<h1>エラーが出たところ</h1>

<p>インストールする時にいくつかエラーが出てたのでその辺りをまとめて。</p>

<a name="default_timezone.................."></a>
<h2>default_timezoneの設定エラー</h2>

<p><code>oil create</code>した時に</p>

<pre><code>Error - date_default_timezone_get(): It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We selected the timezone 'UTC' for now, but please set date.timezone to select your timezone. in COREPATH/classes/fuel.php on line 161
</code></pre>

<p>タイムゾーンの設定ができてないよ！のエラー。<br/>
これは<code>config.php</code>のtimezoneを設定すればオッケーです。</p>

<pre><code>vi fuel/app/config/config.php
</code></pre>

<pre><code>'default_timezone'   =&gt; 'Asia/Tokyo',
</code></pre>

<p>97行目あたりに<code>// 'default_timezone'   =&gt; null,</code>とコメントアウトされている部分があるのでここを変更。</p>

<a name="Composer..................................................."></a>
<h2>Composerがインストールできてない！のエラー</h2>

<p>そのままプロジェクトを配置してアクセスした時にブラウザに</p>

<pre><code>Composer is not installed. Please run "php composer.phar update" in the root to install Composer
</code></pre>

<p>が表示される。</p>

<p>プロジェクトを置いたルートディレクトリ(<code>composer.phar</code>が置かれているディレクトリ)で</p>

<pre><code>php composer.phar update
</code></pre>

<p>をすればオッケーです。</p>

<a name="L......"></a>
<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/L_e_k_o/items/956bd92645769dece5e7">FuelPHPプロジェクトをgit管理するときにすべきこと</a>
もはやこのページのブックマークを残しておきたいがための記事ですが。</li>
</ul>

]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[PHPでのMySQL接続APIを選ぶ]]></title>
        <link href="http://pgmy.github.io/blog/2014/04/04/php-mysql-api/"/>
        <updated>2014-04-04T02:20:28+00:00</updated>
        <id>http://pgmy.github.io/blog/2014/04/04/php-mysql-api</id>
        <content type="html"><![CDATA[<p>PHPを勉強しはじめたところでMySQLへの接続部分で疑問だらけになったので整理しつつメモしていきます。</p>

<a name="Mysqli...POD_MySQL"></a>
<h1>MysqliとPOD_MySQL</h1>

<ul>
<li>参考：<a href="http://us1.php.net/manual/ja/mysqlinfo.api.choosing.php">MySQL用PHPドライバの概要 > どのAPIを使うか</a></li>
</ul>


<!-- more -->


<p>いろんなサイトでMySQLへの接続は<code>mysql_connect</code>を利用すると書かれているものの、マニュアルサイトを見たら</p>

<blockquote><p>この拡張モジュールはPHP5.5.0で非推奨になりました。将来のバージョンで削除される予定です。 <a href="http://www.php.net/manual/ja/book.mysqli.php">MySQLi</a>あるいは<a href="http://www.php.net/manual/ja/ref.pdo-mysql.php">PDO_MySQL</a>を使うべきです。詳細な情報は <a href="http://www.php.net/manual/ja/mysqlinfo.api.choosing.php">MySQL:APIの選択</a>やそれに<a href="http://www.php.net/manual/ja/faq.databases.php#faq.databases.mysql.deprecated">関連するFAQ</a>を参照ください。この関数の代替として、これらが使えます。</p></blockquote>

<p>との警告が赤字ででてました。なるほど。<br/>
FAQの方には</p>

<blockquote><p>広く使われている拡張モジュールなので、ある日突然消えてしまうなどということはないでしょう。でも、今後新しく書くコードではmysqliかPDO_MySQLを使うことを強く推奨します。</p></blockquote>

<p>と書かれていました。私はこれから勉強するので存在は知りつつも、実際に勉強して使っていくのは<code>mysqli</code>か<code>PDO_MySQL</code>ってことでいいのかな。<br/>
じゃあどっち使えばいいのよ！となるわけで。</p>

<p>とりあえず比較表がでてました。</p>

<table>
<thead>
<tr>
<th style="text-align:left;">  </th>
<th style="text-align:center;"> 　ext/mysqli　 </th>
<th style="text-align:center;"> 　PDO_MySQL　 </th>
<th style="text-align:center;"> 　ext/mysql　 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> どのバージョンの PHP から使えるか </td>
<td style="text-align:center;"> 5.0 </td>
<td style="text-align:center;"> 5.1 </td>
<td style="text-align:center;"> 2.0</td>
</tr>
<tr>
<td style="text-align:left;"> PHP 5.x に同梱されているか </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes</td>
</tr>
<tr>
<td style="text-align:left;"> 開発状況 </td>
<td style="text-align:center;"> 進行中 </td>
<td style="text-align:center;"> 進行中 </td>
<td style="text-align:center;"> 保守対応のみ</td>
</tr>
<tr>
<td style="text-align:left;"> ライフサイクル </td>
<td style="text-align:center;"> 活動中 </td>
<td style="text-align:center;"> 活動中 </td>
<td style="text-align:center;"> 非推奨</td>
</tr>
<tr>
<td style="text-align:left;"> 新規開発でおすすめできるか </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> No</td>
</tr>
<tr>
<td style="text-align:left;"> オブジェクト指向のインターフェイス </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> No</td>
</tr>
<tr>
<td style="text-align:left;"> 手続き型のインターフェイス </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> No </td>
<td style="text-align:center;"> Yes</td>
</tr>
<tr>
<td style="text-align:left;"> mysqlnd によるノンブロッキングな非同期クエリ </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> No </td>
<td style="text-align:center;"> No</td>
</tr>
<tr>
<td style="text-align:left;"> 持続的接続 </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes</td>
</tr>
<tr>
<td style="text-align:left;"> 文字セット </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes</td>
</tr>
<tr>
<td style="text-align:left;"> サーバーサイドのプリペアドステートメント </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> No</td>
</tr>
<tr>
<td style="text-align:left;"> クライアントサイドのプリペアドステートメント </td>
<td style="text-align:center;"> No </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> No</td>
</tr>
<tr>
<td style="text-align:left;"> ストアドプロシージャ </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> No</td>
</tr>
<tr>
<td style="text-align:left;"> 複数ステートメント </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Most </td>
<td style="text-align:center;"> No</td>
</tr>
<tr>
<td style="text-align:left;"> トランザクション </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> No</td>
</tr>
<tr>
<td style="text-align:left;"> SQL によるトランザクション制御 </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes</td>
</tr>
<tr>
<td style="text-align:left;"> MySQL 5.1+ の全機能への対応 </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Most </td>
<td style="text-align:center;"> No</td>
</tr>
</tbody>
</table>


<p>ほむ。わからない言葉がいろいろと。</p>

<a name="L......................................."></a>
<h2>オブジェクト指向と手続き型</h2>

<p>このあたりの違いは下記サイトを見るととてもわかりやすいです。</p>

<ul>
<li>参考：<a href="http://quill3.hatenablog.com/entry/20090321/p1">手続き型とオブジェクト指向の違いをWebアプリで理解する</a></li>
</ul>


<p>MySQLの例ではありませんが。<br/>
両方使えるmysqliで見てみると、</p>

<ul>
<li>手続き型</li>
</ul>


<pre><code>$db = mysqli_connect("example.com", "user", "password", "database");
$result = mysqli_query($db,"SELECT 'Hello, dear MySQL user!' AS _message FROM DUAL");
$row = mysqli_fetch_assoc($result);
echo htmlentities($row['_message']);
</code></pre>

<ul>
<li>オブジェクト指向</li>
</ul>


<pre><code>$mysqli = new mysqli("example.com", "user", "password", "database");
$result = $mysqli-&gt;query("SELECT 'Hello, dear MySQL user!' AS _message FROM DUAL");
$row = $result-&gt;fetch_assoc();
echo htmlentities($row['_message']);
</code></pre>

<p>こんな感じになるのかなぁ・・・。<br/>
基本的には手続き型は使わない方向でいこうと思っているのでmysqliでもPDO_MySQLでもどちらでも大丈夫という結論に・ω・</p>

<a name="mysqlnd.........................................................."></a>
<h2>mysqlnd によるノンブロッキングな非同期クエリ？</h2>

<p>ひとまずmysqlndってなんだ！　⇒　MySQL Native Driver For PHPのことだそうです。</p>

<ul>
<li>参考：<a href="http://d.hatena.ne.jp/bco/20110101/1293887044">MySQL native driver for PHP(通称mysqlnd)だ</a></li>
</ul>


<blockquote><p>mysqlndの利点は2つある。ひとつはパフォーマンス。オリジナルのmysql(i)拡張およびPDO_MYSQLよりも速い。そしてライセンス。
mysqlndはGPLv2ではなくPHPライセンスなのだ。</p></blockquote>

<p>パフォーマンスが良くなるってことなのかな？ライセンスについてはマニュアルに詳しく記載されてます。</p>

<ul>
<li>参考：[PHPマニュアル>mysqlnd>概要]</li>
</ul>


<p>おすすめ機能として下記があげらえていました。</p>

<blockquote><p>MySQL Native Driver には、それ特有の機能もあります。 以下にまとめるこれらの機能は、MySQL Client Library を使った MySQL データベース用の拡張モジュールでは利用できないものです。
- 持続的接続の改善
- mysqli_fetch_all() 関数
- パフォーマンス統計用の関数 mysqli_get_cache_stats()、 mysqli_get_client_stats()、 mysqli_get_connection_stats()<br/>
パフォーマンス統計機能を活用すれば、 パフォーマンス上のボトルネックを見つけるのに大いに役立つでしょう。</p>

<p>MySQL Native Driver を mysqli 拡張モジュールで使うと、持続的接続も可能です。
- SSL サポート<br/>
MySQL Native Driver は PHP 5.3.3 以降で SSL をサポートします。
- 圧縮プロトコルのサポート<br/>
PHP 5.3.2 以降では、MySQL Native Driver は圧縮したクライアントサーバープロトコルをサポートします。 5.3.0 や 5.3.1 の時点ではまだ対応していませんでした。 ext/mysql や ext/mysqli では、MySQL Native Driver を使うように設定すればこの機能を使えるようになります。 ただし、PDO_MYSQL については mysqlnd と組み合わせても圧縮機能が使えないことに注意しましょう。</p></blockquote>

<p>つまりPDO_MYSQLはmysqlndの圧縮機能が使えない・非同期クエリが使えない、ということでいいのかな？<br/>
非同期クエリについては下記に詳しく記載されていました。</p>

<ul>
<li>参考：<a href="http://fukaoi.org/2012/03/31/php_mysqli">PHPの非同期クエリで並行処理をやってみる</a></li>
</ul>


<a name="L..............."></a>
<h2>持続的接続</h2>

<ul>
<li>参考：<a href="http://www.phppro.jp/phpmanual/php/function.mysql-pconnect.html">mysql_pconnect: MySQL サーバへの持続的な接続をオープンする</a></li>
<li>　　：<a href="http://www.phppro.jp/phpmanual/php/features.persistent-connections.html">持続的データベース接続</a></li>
</ul>


<blockquote><p>mysql_pconnect()は、 mysql_connect()とよく似た動作をしますが、 2 つの大きな違いがあります。<br/>
1. 1 番目の違いとして、この関数は接続時にまず 同じホスト、ユーザ名、パスワードを有する(持続的)リンクが すでにオープンされていないかどうかを調べます。 それがみつかった場合、新規の接続をオープンする代わりに そのリンクの ID が返されます。<br/>
1. 2 番目の違いは、スクリプトの実行が終了しても SQL サーバとの接続が 閉じられないということです。そのかわりに、将来再利用されるために リンクがオープンされたままとなります（mysql_close() は、mysql_pconnect() によって確立されたリンクを 閉じません）。</p>

<p>このため、この型のリンクは、'持続的(persistent)&lsquo;であると言われます。</p></blockquote>

<p>つまり、同じホスト、ユーザ名、パスワードを有する場合、スクリプトの実行が終了してもSQLサーバとの接続が閉じられない・・・？<br/>
いろいろ説明を読むと、注意すべき点が多くあるようで、少し難しい内容でした。<br/>
まだいろいろ理解しきれていないため、この機能の利用は保留にしようと思います。</p>

<a name="L...................................."></a>
<h2>プリペアドステートメント</h2>

<ul>
<li>参考：<a href="http://www.phpbook.jp/pear/pear_db/index12.html">PHPBook プリペアドステートメント</a></li>
<li>　　：<a href="http://www.atmarkit.co.jp/fsecurity/column/ueno/60.html">今夜こそわかる安全なSQLの呼び出し方　～ 高木浩光氏に聞いてみた</a></li>
<li>　　：<a href="http://qiita.com/tabo_purify/items/d1166236f3b03c7be60d">PDOで接続、SELECT、プリペアドステートメントとは（PHPでMySQLに接続）</a></li>
</ul>


<blockquote><p>SQLの実行は、SQL文を構文解析する作業と、それを解釈する作業に分かれる。プリペアド・ステートメントというのは、この構文解析をDBMS側で先に済ませておき、そこにパラメータを当てはめて繰り返し使うことで、処理効率を高めるために活用されるものだ。<br/>
プリペアド・ステートメントを使用していれば、どんなパラメータが与えられても構文解析は変わらないので、結果的にSQLインジェクションによってSQL文の構文が破壊されることは起きない。</p></blockquote>

<ul>
<li>構文解析作業を先にすませておける。</li>
<li>パラメータを当てはめて使うことで処理効率が良くなる。</li>
<li>SQLインジェクションで構文が破壊されることが起きない。(そのままw)</li>
</ul>


<p>ということみたい。なるほどー。これは使わない手はない！<br/>
ただ、サーバーサイドとクライアントサイドのプリペアドステートメントというのがあるそうだけど、この違いがいまいちわからない。<br/>
mysqliがクライアントサイドのプリペアドステートメントをサポートしていない。<br/>
ので、mysqliを使う時はここを調べないといけないけどわからないー＞△＜教えて偉い人！</p>

<a name="L.............................."></a>
<h2>ストアドプロシージャ</h2>

<ul>
<li>参考：<a href="http://kozy.heteml.jp/pukiwiki/index.php?MySQL%20%A5%B9%A5%C8%A5%A2%A5%C9%A5%D7%A5%ED%A5%B7%A1%BC%A5%B8%A5%E3">MySQL ストアドプロシージャ</a></li>
<li>　　：<a href="http://blog.livedoor.jp/sasata299/archives/51180619.html">mysqlのストアドプロシージャの便利さをアピールしてみる </a></li>
<li>　　：<a href="http://d.hatena.ne.jp/Sikushima/20100610/1276153844">ストアドプロシージャでシステムを構築するとDBサーバの負荷が増えるか</a></li>
</ul>


<blockquote><p>■ストアドプロシージャとは？<br/>
一連のSQL文や処理を名前をつけてサーバ側に保存し、関数呼び出しのように使用できるもの。<br/>
■ストアドプロシージャを使うメリットは？<br/>
- アプリ側の言語を選ばない。（MySQLで実装されていて、呼ぶだけなので）<br/>
- アプリサーバの負荷が減る。（複雑な処理はMySQL側で実行されているため）</p>

<p>よく似たのに、ストアドファンクションってのもあります。</p></blockquote>

<p>ほむほむ・・・SQL文とか処理を保存しておけて、関数みたいに呼び出すことができると。便利そう！<br/>
これはどちらでもサポートしているものみたい。</p>

<a name="L..........................."></a>
<h2>複数ステートメント</h2>

<ul>
<li>参考：<a href="http://freestyle.nvo.jp/archives/260">最近知ったSQL〜複数のINSERTとUPDATE〜</a></li>
</ul>


<p>これもちょっといまいちわからないままでした・・・。<br/>
とりあえず？どちらも利用できるようですが、INSERTやUPDATEを複数行まとめて行えるものなのか・・・。<br/>
似た名前のものに<a href="http://dev.mysql.com/doc/refman/5.1-olh/ja/begin-end.html">複合ステートメント</a>というものがあるようで、これとはまた別なのか？<br/>
と、ちょっぴり怪しいままです・・・。</p>

<a name="L.........................SQL......................................."></a>
<h2>トランザクション/SQLによるトランザクション制御</h2>

<ul>
<li>参考：<a href="http://wiki.bit-hive.com/tomizoo/pg/MySQL%20%A5%C8%A5%E9%A5%F3%A5%B6%A5%AF%A5%B7%A5%E7%A5%F3">MySQL トランザクション</a></li>
</ul>


<blockquote><p>トランザクションを使うと複数のクエリをまとめて１つの処理として扱うことができる。処理の途中でエラーになって処理を取り消したいような場合はROLLBACKをすることで変更内容を元に戻すことができる。</p></blockquote>

<p>トランザクションは元々しっていたので大丈夫でした。<br/>
注意すべきはMyISAMでは利用できず、InnoDBにしておく必要がある、ということでしょうか。<br/>
これは両方で利用することができます。重要な機能！</p>

<p>ざっと調べたものをまとめただけですが。内容に誤りがあったり、理解できなかった部分がわかった時にはまた更新する予定です・・・。</p>
]]></content>
    </entry>
    
</feed>
